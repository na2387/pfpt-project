generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model Practitioner {
  id              String                  @id @default(cuid())
  firstName       String?
  lastName        String
  phone           String?
  address         String?
  state           String?
  zip             String?
  website         String?
  selfPayInitial  Int?                    @default(0)
  selfPayFollowUp Int?                    @default(0)
  createdAt       DateTime?               @default(now())
  updatedAt       DateTime?               @updatedAt
  borough         String?
  cert            String?
  lat             Float?
  long            Float?
  practice        String?
  degrees         PractitionerDegree[]
  insurances      PractitionerInsurance[]
}

model Degree {
  id            String               @id @default(cuid())
  name          String               @unique
  fullName      String?
  description   String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  practitioners PractitionerDegree[]
}

model Insurance {
  id            String                  @id @default(cuid())
  name          String                  @unique
  code          String?                 @unique
  website       String?
  phone         String?
  isActive      Boolean                 @default(true)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  practitioners PractitionerInsurance[]
}

model PractitionerDegree {
  id             String       @id @default(cuid())
  practitionerId String
  degreeId       String
  yearObtained   Int?
  institution    String?
  createdAt      DateTime     @default(now())
  degree         Degree       @relation(fields: [degreeId], references: [id], onDelete: Cascade)
  practitioner   Practitioner @relation(fields: [practitionerId], references: [id], onDelete: Cascade)

  @@unique([practitionerId, degreeId])
}

model PractitionerInsurance {
  id             String       @id @default(cuid())
  practitionerId String
  insuranceId    String
  isPreferred    Boolean?     @default(false)
  notes          String?
  createdAt      DateTime     @default(now())
  insurance      Insurance    @relation(fields: [insuranceId], references: [id], onDelete: Cascade)
  practitioner   Practitioner @relation(fields: [practitionerId], references: [id], onDelete: Cascade)

  @@unique([practitionerId, insuranceId])
}
